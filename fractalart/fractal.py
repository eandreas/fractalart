"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/fractals/01_fractal.ipynb.

# %% auto 0
__all__ = ['Fractal', 'mandelbrot_step', 'Mandelbrot']

# %% ../nbs/fractals/01_fractal.ipynb 4
from abc import abstractmethod
import numpy as np
from .core import Image
from numba import njit, prange
import math
import matplotlib.pyplot as plt

# %% ../nbs/fractals/01_fractal.ipynb 5
class Fractal(Image):
    """Abstract base class for generating fractal images."""

    @abstractmethod
    def compute(self) -> np.ndarray:
        """Abstract method to compute the fractal array. Must be implemented by subclasses."""
        pass

    @property
    def max_iter(self) -> int:
        """Maximum number of iterations used in fractal computation."""
        return self._max_iter

    @max_iter.setter
    def max_iter(self, value: int):
        if value <= 0:
            raise ValueError("max_iter must be a positive integer.")
        self._max_iter = value

    def plot(self, cmap: str = "turbo"):
        """Display the rendered fractal image using matplotlib."""
        # TODO : Us lighter image plotting, e. g. using PIL.Image or cv2
        plt.figure(figsize=(8, 8))
        plt.imshow(
            self._image,
            cmap=cmap,
            extent=[self._x_min, self._x_max, self._y_min, self._y_max],
            origin='lower'
        )
        plt.axis('off')
        plt.show()
    
    def set_zoom(self, zoom: float, center: tuple[float, float]):
        """
        Zoom into the fractal at a specific center.

        Args:
            zoom: Zoom factor (higher is closer).
            center: (x, y) center coordinates in the complex plane.
        """
        if zoom <= 0:
            raise ValueError("zoom must be a positive number.")
        #delta = 2 / zoom
        #cx, cy = center
        #self._x_min, self._x_max = cx - delta, cx + delta
        #self._y_min, self._y_max = cy - delta, cy + delta
        cx, cy = center
        delta = (self._x_max - self._x_min) / (2 * zoom)
        self._x_min, self._x_max = cx - delta, cx + delta
        self._y_min, self._y_max = cy - delta, cy + delta

    def _render(self):
        """Generate and store the fractal image using the subclass-defined `compute` method."""
        self._image = self.compute()

# %% ../nbs/fractals/01_fractal.ipynb 6
@njit(parallel=True, fastmath=True)
def _compute_fractal(x_min: float, x_max: float, y_min: float, y_max: float, resolution: tuple[int, int],
                     max_iter: int, fractal_fn) -> np.ndarray:
    
    width, height = resolution
    result = np.zeros((height, width), dtype=np.float32)
    
    r2_cut = max(abs(x_max), abs(x_min)) * max(abs(x_max), abs(x_min)) + max(abs(y_max), abs(y_min)) * max(abs(y_max), abs(y_min))

    dx = (x_max - x_min) / (width - 1)
    dy = (y_max - y_min) / (height - 1)
    inv_log2 = 1.0 / math.log(2.0)

    for j in prange(height):
        zy = y_min + j * dy
        for i in range(width):
            zx = x_min + i * dx
            zr = 0.0
            zi = 0.0
            cr = zx
            ci = zy
            iteration = 0

            while zr * zr + zi * zi <= r2_cut and iteration < max_iter:
                zr, zi = fractal_fn(zr, zi, cr, ci)
                iteration += 1

            if iteration < max_iter:
                mag_sq = zr * zr + zi * zi
                if mag_sq > 0.0:
                    log_zn = 0.5 * math.log(mag_sq)
                    if log_zn > 0.0:
                        nu = math.log(log_zn * inv_log2) * inv_log2
                        result[j, i] = iteration + 1 - nu
                    else:
                        result[j, i] = iteration
                else:
                    result[j, i] = iteration
            else:
                result[j, i] = iteration

    return result

# %% ../nbs/fractals/01_fractal.ipynb 7
@njit
def mandelbrot_step(zr, zi, cr, ci):
    zr2 = zr * zr - zi * zi + cr
    zi = 2.0 * zr * zi + ci
    return zr2, zi

# %% ../nbs/fractals/01_fractal.ipynb 8
class Mandelbrot(Fractal):
    def __init__(
        self,
        x_min: float = -2.0,
        x_max: float = 1.0,
        y_min: float = -1.5,
        y_max: float = 1.5,
        width: int = 600,
        height: int = 600,
        max_iter: int = 200,
    ):
        """Initialize the fractal with image resolution and complex plane bounds."""
        self._x_min, self._x_max = x_min, x_max
        self._y_min, self._y_max = y_min, y_max
        self.resolution = width, height
        self.max_iter = max_iter
        
    def compute(self) -> np.ndarray:
        w, h = self.resolution
        return _compute_fractal(self._x_min, self._x_max, self._y_min, self._y_max, self.resolution, self._max_iter, mandelbrot_step)
