"""Abstract class `Fractal` is the basis of all other fractal implementations, providing all base functionality a fractal needs."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/fractals/01_abstract_fractal.ipynb.

# %% auto 0
__all__ = ['Fractal']

# %% ../../nbs/fractals/01_abstract_fractal.ipynb 4
from abc import abstractmethod
import numpy as np
from ..core import Image
import matplotlib.pyplot as plt

# %% ../../nbs/fractals/01_abstract_fractal.ipynb 5
class Fractal(Image):
    """Abstract base class for generating fractal images."""

    @abstractmethod
    def compute(self) -> np.ndarray:
        """Abstract method to compute the fractal array. Must be implemented by subclasses."""
        pass

    @property
    def max_iter(self) -> int:
        """Maximum number of iterations used in fractal computation."""
        return self._max_iter

    @max_iter.setter
    def max_iter(self, value: int):
        if value <= 0:
            raise ValueError("max_iter must be a positive integer.")
        self._max_iter = value

    def plot(self, cmap: str = "turbo"):
        """Display the rendered fractal image using matplotlib."""
        # TODO : Us lighter image plotting, e. g. using PIL.Image or cv2
        plt.figure(figsize=(8, 8))
        plt.imshow(
            self._image,
            cmap=cmap,
            extent=[self._x_min, self._x_max, self._y_min, self._y_max],
            origin='lower'
        )
        plt.axis('off')
        plt.show()

    @property
    def bounds(self, x_min: float, x_max: float, y_min: float, y_max: float):
        """
        Set the bounds of the fractal image in the complex plane.
        
        Args:
            x_min: Minimum x (real) coordinate.
            x_max: Maximum x (real) coordinate.
            y_min: Minimum y (imaginary) coordinate.
            y_max: Maximum y (imaginary) coordinate.
        """
        if x_min >= x_max:
            raise ValueError("x_min must be less than x_max")
        if y_min >= y_max:
            raise ValueError("y_min must be less than y_max")
        
        self._x_min = x_min
        self._x_max = x_max
        self._y_min = y_min
        self._y_max = y_max
    
    def set_zoom(self, zoom: float, center: tuple[float, float]):
        """
        Zoom into the fractal at a specific center.

        Args:
            zoom: Zoom factor (higher is closer).
            center: (x, y) center coordinates in the complex plane.
        """
        if zoom <= 0:
            raise ValueError("zoom must be a positive number.")
        cx, cy = center
        delta = (self._x_max - self._x_min) / (2 * zoom)
        self._x_min, self._x_max = cx - delta, cx + delta
        self._y_min, self._y_max = cy - delta, cy + delta

    def _render(self):
        """Generate and store the fractal image using the subclass-defined `compute` method."""
        self._image = self.compute()
